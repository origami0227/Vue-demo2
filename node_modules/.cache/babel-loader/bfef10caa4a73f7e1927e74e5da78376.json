{"remainingRequest":"/Users/piwang/Desktop/Vue-demo-2/node_modules/babel-loader/lib/index.js!/Users/piwang/Desktop/Vue-demo-2/node_modules/eslint-loader/index.js??ref--13-0!/Users/piwang/Desktop/Vue-demo-2/src/main.js","dependencies":[{"path":"/Users/piwang/Desktop/Vue-demo-2/src/main.js","mtime":1661045406642},{"path":"/Users/piwang/Desktop/Vue-demo-2/node_modules/cache-loader/dist/cjs.js","mtime":1661045341711},{"path":"/Users/piwang/Desktop/Vue-demo-2/node_modules/babel-loader/lib/index.js","mtime":1661045344311},{"path":"/Users/piwang/Desktop/Vue-demo-2/node_modules/eslint-loader/index.js","mtime":1661045342227}],"contextDependencies":[],"result":["let obj0 = {\n  姓: \"高\",\n  名: \"圆圆\",\n  age: 18\n}; // 需求一，得到姓名\n\nlet obj1 = {\n  姓: \"高\",\n  名: \"圆圆\",\n\n  姓名() {\n    return this.姓 + this.名;\n  },\n\n  age: 18\n};\nconsole.log(\"需求一：\" + obj1.姓名()); // 姓名后面的括号能删掉吗？不能，因为它是函数\n// 怎么去掉括号？\n// 需求二，姓名不要括号也能得出值\n\nlet obj2 = {\n  姓: \"高\",\n  名: \"圆圆\",\n\n  get 姓名() {\n    return this.姓 + this.名;\n  },\n\n  age: 18\n};\nconsole.log(\"需求二：\" + obj2.姓名); // 总结：getter 就是这样用的。不加括号的函数，仅此而已。\n// 需求三：姓名可以被写\n\nlet obj3 = {\n  姓: \"高\",\n  名: \"圆圆\",\n\n  get 姓名() {\n    return this.姓 + this.名;\n  },\n\n  set 姓名(xxx) {\n    this.姓 = xxx[0];\n    this.名 = xxx.slice(1);\n  },\n\n  age: 18\n};\nobj3.姓名 = '高媛媛';\nconsole.log(`需求三：姓 ${obj3.姓}，名 ${obj3.名}`); // 总结：setter 就是这样用的。用 = xxx 触发 set 函数",{"version":3,"names":["obj0","姓","名","age","obj1","姓名","console","log","obj2","obj3","xxx","slice"],"sources":["/Users/piwang/Desktop/Vue-demo-2/src/main.js"],"sourcesContent":["let obj0 = {\n    姓: \"高\",\n    名: \"圆圆\",\n    age: 18\n};\n\n// 需求一，得到姓名\n\nlet obj1 = {\n    姓: \"高\",\n    名: \"圆圆\",\n    姓名() {\n        return this.姓 + this.名;\n    },\n    age: 18\n};\n\nconsole.log(\"需求一：\" + obj1.姓名());\n// 姓名后面的括号能删掉吗？不能，因为它是函数\n// 怎么去掉括号？\n\n// 需求二，姓名不要括号也能得出值\n\nlet obj2 = {\n    姓: \"高\",\n    名: \"圆圆\",\n    get 姓名() {\n        return this.姓 + this.名;\n    },\n    age: 18\n};\n\nconsole.log(\"需求二：\" + obj2.姓名);\n\n// 总结：getter 就是这样用的。不加括号的函数，仅此而已。\n\n// 需求三：姓名可以被写\n\nlet obj3 = {\n    姓: \"高\",\n    名: \"圆圆\",\n    get 姓名() {\n        return this.姓 + this.名;\n    },\n    set 姓名(xxx) {\n        this.姓 = xxx[0]\n        this.名 = xxx.slice(1)\n    },\n    age: 18\n};\n\nobj3.姓名 = '高媛媛'\n\nconsole.log(`需求三：姓 ${obj3.姓}，名 ${obj3.名}`)\n\n// 总结：setter 就是这样用的。用 = xxx 触发 set 函数\n"],"mappings":"AAAA,IAAIA,IAAI,GAAG;EACPC,CAAC,EAAE,GADI;EAEPC,CAAC,EAAE,IAFI;EAGPC,GAAG,EAAE;AAHE,CAAX,C,CAMA;;AAEA,IAAIC,IAAI,GAAG;EACPH,CAAC,EAAE,GADI;EAEPC,CAAC,EAAE,IAFI;;EAGPG,EAAE,GAAG;IACD,OAAO,KAAKJ,CAAL,GAAS,KAAKC,CAArB;EACH,CALM;;EAMPC,GAAG,EAAE;AANE,CAAX;AASAG,OAAO,CAACC,GAAR,CAAY,SAASH,IAAI,CAACC,EAAL,EAArB,E,CACA;AACA;AAEA;;AAEA,IAAIG,IAAI,GAAG;EACPP,CAAC,EAAE,GADI;EAEPC,CAAC,EAAE,IAFI;;EAGP,IAAIG,EAAJ,GAAS;IACL,OAAO,KAAKJ,CAAL,GAAS,KAAKC,CAArB;EACH,CALM;;EAMPC,GAAG,EAAE;AANE,CAAX;AASAG,OAAO,CAACC,GAAR,CAAY,SAASC,IAAI,CAACH,EAA1B,E,CAEA;AAEA;;AAEA,IAAII,IAAI,GAAG;EACPR,CAAC,EAAE,GADI;EAEPC,CAAC,EAAE,IAFI;;EAGP,IAAIG,EAAJ,GAAS;IACL,OAAO,KAAKJ,CAAL,GAAS,KAAKC,CAArB;EACH,CALM;;EAMP,IAAIG,EAAJ,CAAOK,GAAP,EAAY;IACR,KAAKT,CAAL,GAASS,GAAG,CAAC,CAAD,CAAZ;IACA,KAAKR,CAAL,GAASQ,GAAG,CAACC,KAAJ,CAAU,CAAV,CAAT;EACH,CATM;;EAUPR,GAAG,EAAE;AAVE,CAAX;AAaAM,IAAI,CAACJ,EAAL,GAAU,KAAV;AAEAC,OAAO,CAACC,GAAR,CAAa,SAAQE,IAAI,CAACR,CAAE,MAAKQ,IAAI,CAACP,CAAE,EAAxC,E,CAEA"}]}